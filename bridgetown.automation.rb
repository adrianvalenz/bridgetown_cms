# Bridgetown CMS Setup Automation
# This sets up the admin routes for the CMS

say_status :bridgetown_cms, "Setting up Bridgetown CMS Admin..."

# Create the admin routes file
create_file "server/routes/admin.rb" do
  <<~RUBY
    # Bridgetown CMS Admin Routes
    # This file is auto-generated by the bridgetown_cms plugin

    require "bridgetown_cms/admin_routes"

    class Routes::Admin < Bridgetown::Rack::Routes
      route do |r|
        # Mount CMS admin routes
        BridgetownCms::AdminRoutes.define_routes(r)
      end
    end
  RUBY
end

say_status :bridgetown_cms, "Admin routes created at server/routes/admin.rb"

# Update config/initializers.rb to add required initializers
initializers_path = "config/initializers.rb"

if File.exist?(initializers_path)
  initializers_content = File.read(initializers_path)
  needs_update = false
  updates = []

  # Check if init :ssr is present
  unless initializers_content.match?(%r{^\s*init\s+:ssr})
    needs_update = true
    updates << "  init :ssr"
  end

  # Check if init :bridgetown_cms is present
  unless initializers_content.match?(%r{^\s*init\s+:bridgetown_cms})
    needs_update = true
    updates << "  init :bridgetown_cms"
  end

  if needs_update
    # Add the missing initializers inside the Bridgetown.configure block
    updated_content = initializers_content.dup
    lines = updated_content.lines

    # Find the Bridgetown.configure block
    configure_index = lines.index { |line| line.match?(/Bridgetown\.configure\s+do/) }

    if configure_index
      # Look for the best place to insert inside the block
      # Try to find existing init statements or the commented init examples
      insert_index = nil

      # First, try to find existing uncommented init statements
      (configure_index + 1...lines.length).each do |i|
        break if lines[i].match?(/^end\s*$/)  # Stop at the end of the block

        if lines[i].match?(/^\s*init\s+:/) && !lines[i].strip.start_with?('#')
          # Found an uncommented init statement, insert after it
          insert_index = i + 1
        end
      end

      # If no existing init statements, look for the commented init examples
      unless insert_index
        (configure_index + 1...lines.length).each do |i|
          break if lines[i].match?(/^end\s*$/)

          # Look for the "# init :dotenv" comment or similar
          if lines[i].match?(/^\s*#\s*init\s+:/)
            # Insert after the commented example and any following blank lines
            insert_index = i + 1
            while insert_index < lines.length && lines[insert_index].strip.empty?
              insert_index += 1
            end
            break
          end
        end
      end

      # If still no good place found, insert right after the configure line
      insert_index ||= configure_index + 1

      # Insert with a blank line before if not right after configure
      if insert_index > configure_index + 1
        lines.insert(insert_index, "\n")
        insert_index += 1
      end

      # Insert the init statements
      updates.each do |init_line|
        lines.insert(insert_index, "#{init_line}\n")
        insert_index += 1
      end

      updated_content = lines.join
      File.write(initializers_path, updated_content)
      say_status :bridgetown_cms, "Updated config/initializers.rb with: #{updates.map(&:strip).join(", ")}"
    else
      say_status :bridgetown_cms,
                 "Warning: Could not find Bridgetown.configure block. Please add 'init :ssr' and 'init :bridgetown_cms' manually inside the block.", :yellow
    end
  else
    say_status :bridgetown_cms, "Initializers already configured"
  end
else
  say_status :bridgetown_cms,
             "Warning: config/initializers.rb not found. Please add 'init :ssr' and 'init :bridgetown_cms' manually.", :yellow
end

say_status :bridgetown_cms, "Setup complete! ðŸŽ‰", :green
say_status :bridgetown_cms, "Visit /admin after starting your server"

# Code below is kept for reference...
#
# If your plugin requires a lot of steps to get set up, consider writing an automation to help guide users.
# You could set up and configure all sorts of things, for example:
#
# add_gem("my_plugin")
#
# add_yarn_for_gem("my_plugin")
#
# add_initializer :"my_plugin" do
#   <<~RUBY
#     do
#       some_config_key 12345
#     end
#   RUBY
# end
#
# create_builder "my_nifty_builder.rb" do
#   <<~RUBY
#     class MyNeatBuilder < SiteBuilder
#       def build
#         puts MyPlugin.hello
#       end
#     end
#   RUBY
# end
#
# javascript_import do
#   <<~JS
#     import { MyPlugin } from "my_plugin"
#   JS
# end
#
# javascript_import 'import "my_plugin/frontend/styles/index.css"'
#
# create_file "src/_data/plugin_data.yml" do
#   <<~YAML
#     data:
#       goes: here
#   YAML
# end
#
# color = ask("What's your favorite color?")
#
# append_to_file "bridgetown.config.yml" do
#   <<~YAML
#
#     my_plugin:
#       favorite_color: #{color}
#   YAML
# end
#
# Read the Automations documentation: https://www.bridgetownrb.com/docs/automations
