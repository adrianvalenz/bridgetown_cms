# Bridgetown CMS Setup Automation
# This sets up the admin routes for the CMS

say_status :bridgetown_cms, "Setting up Bridgetown CMS Admin..."

# Create the admin routes file
create_file "server/routes/admin.rb" do
  <<~RUBY
    # Bridgetown CMS Admin Routes
    # This file is auto-generated by the bridgetown_cms plugin

    require "bridgetown_cms/admin_routes"

    class Routes::Admin < Bridgetown::Rack::Routes
      route do |r|
        # Mount CMS admin routes
        BridgetownCms::AdminRoutes.define_routes(r)
      end
    end
  RUBY
end

say_status :bridgetown_cms, "Admin routes created at server/routes/admin.rb"

# Update config/initializers.rb to add required initializers
initializers_path = "config/initializers.rb"

if File.exist?(initializers_path)
  initializers_content = File.read(initializers_path)
  needs_update = false
  updates = []

  # Check if init :ssr is present
  unless initializers_content.match?(%r{^\s*init\s+:ssr})
    needs_update = true
    updates << "init :ssr"
  end

  # Check if init :bridgetown_cms is present
  unless initializers_content.match?(%r{^\s*init\s+:bridgetown_cms})
    needs_update = true
    updates << "init :bridgetown_cms"
  end

  if needs_update
    # Add the missing initializers
    updated_content = initializers_content.dup

    # Find a good place to insert - after other init statements or at the beginning
    if updated_content.match?(%r{^\s*init\s+})
      # Find the last init statement and insert after it
      lines = updated_content.lines
      last_init_index = lines.rindex { |line| line.match?(%r{^\s*init\s+}) }

      if last_init_index
        lines.insert(last_init_index + 1, *updates.map { |u| "#{u}\n" })
        updated_content = lines.join
      end
    else
      # Insert at the beginning of the file
      updated_content = "#{updates.join("\n")}\n\n#{updated_content}"
    end

    File.write(initializers_path, updated_content)
    say_status :bridgetown_cms, "Updated config/initializers.rb with: #{updates.join(", ")}"
  else
    say_status :bridgetown_cms, "Initializers already configured"
  end
else
  say_status :bridgetown_cms,
             "Warning: config/initializers.rb not found. Please add 'init :ssr' and 'init :bridgetown_cms' manually.", :yellow
end

say_status :bridgetown_cms, "Setup complete! ðŸŽ‰", :green
say_status :bridgetown_cms, "Visit /admin after starting your server"

# Code below is kept for reference...
#
# If your plugin requires a lot of steps to get set up, consider writing an automation to help guide users.
# You could set up and configure all sorts of things, for example:
#
# add_gem("my_plugin")
#
# add_yarn_for_gem("my_plugin")
#
# add_initializer :"my_plugin" do
#   <<~RUBY
#     do
#       some_config_key 12345
#     end
#   RUBY
# end
#
# create_builder "my_nifty_builder.rb" do
#   <<~RUBY
#     class MyNeatBuilder < SiteBuilder
#       def build
#         puts MyPlugin.hello
#       end
#     end
#   RUBY
# end
#
# javascript_import do
#   <<~JS
#     import { MyPlugin } from "my_plugin"
#   JS
# end
#
# javascript_import 'import "my_plugin/frontend/styles/index.css"'
#
# create_file "src/_data/plugin_data.yml" do
#   <<~YAML
#     data:
#       goes: here
#   YAML
# end
#
# color = ask("What's your favorite color?")
#
# append_to_file "bridgetown.config.yml" do
#   <<~YAML
#
#     my_plugin:
#       favorite_color: #{color}
#   YAML
# end
#
# Read the Automations documentation: https://www.bridgetownrb.com/docs/automations
